#performed on a biological sample to capture data at a particular molecular #level. Each assay represents a distinct omics layer, such as:
#Genomics Assay, Transcriptomics Assay, Proteomics Assay, Metabolomics Assay
assays <- c("RNASeq2Gene", "miRNASeqGene", "RPPAArray");
multi_omics_dataset <- curatedTCGAData(diseaseCode = "PRAD",
assays = assays,
version = "2.0.1", dry.run = FALSE);
multi_omics_dataset
# Consider only primary solid tumors:
primary <- TCGAutils::TCGAsampleSelect(colnames(multi_omics_dataset), c("01"));
multi_omics_dataset <- multi_omics_dataset[, primary, ];
# Check for replicates (anyReplicated checks the so called biological or
# primary unit in the sampleMap of the MultiAssayExperiment object, that
# corresponds to the first 12 characters of the barcodes for TCGA data):
check_rep <- anyReplicated(multi_omics_dataset);
print(check_rep);
# The information regarding if the sample is FFPE is stored in the clinical data,
# which are accessible using colData().
no_ffpe <- which(as.data.frame(colData(multi_omics_dataset))$patient.samples.sample.is_ffpe == "no");
multi_omics_dataset <- multi_omics_dataset[, no_ffpe, ];
# Obtain samples having all the considered omics:
complete <- intersectColumns(multi_omics_dataset);
# Extract assays in list:
complete <- assays(complete);
# Obtain matrices samples x features:
#Transposes the matrix
complete <- lapply(complete, FUN=t)
# Remove features having NAs (present only in proteomics data):
complete[[3]] <- complete[[3]][, colSums(is.na(complete[[3]])) == 0];
# Remove features with near zero variance and retain top 500 features
# having higher variance:
features_threshold <- 100;
for(i in 1:length(complete)){
zero_var_indexes <- caret::nearZeroVar(complete[[i]])
message(paste("Removed ", length(zero_var_indexes), "features from", names(complete)[i]));
if(length(zero_var_indexes) != 0){
complete[[i]] <- complete[[i]][, -zero_var_indexes];
}
# if less features than threashold return them all
if(ncol(complete[[i]]) <= features_threshold) next
vars <- apply(complete[[i]], 2, var);
var_ordered_indexes <- sort(vars, index.return=TRUE, decreasing = TRUE)$ix;
complete[[i]] <- complete[[i]][, var_ordered_indexes[1:features_threshold]];
}
# Perform features standardization using z-score:
zscore <- function(data){
zscore_vec <- function(x) { return ((x - mean(x)) / sd(x))}
data <- apply(data, 2, zscore_vec)
data
}
complete <- lapply(complete, zscore);
# Clean barcodes retaining only "Project-TSS-Participant":
for(v in 1:length(complete)){
rownames(complete[[v]]) <- substr(rownames(complete[[v]]), 1, 12);
}
# Download disease subtypes from TCGAbiolinks:
subtypes <- as.data.frame(TCGAbiolinks::PanCancerAtlas_subtypes());
subtypes <- subtypes[subtypes$cancer.type == "PRAD", ];
# Retain only primary solid tumors and select samples form multi-omics dataset having an associated subtype
# (in the same order):
subtypes <- subtypes[TCGAutils::TCGAsampleSelect(subtypes$pan.samplesID, "01"), ];
samples_with_subtype <- rownames(complete[[1]]) %in% substr(subtypes$pan.samplesID, 1, 12);
subtypes_with_sample <- substr(subtypes$pan.samplesID, 1, 12) %in% rownames(complete[[1]])
subtypes <- subtypes[subtypes_with_sample,]
rownames(subtypes) <- substr(subtypes$pan.samplesID, 1, 12);
for(v in 1:length(complete)) {
complete[[v]] <- complete[[v]][samples_with_subtype,];
}
subtypes <- subtypes[order(subtypes$pan.samplesID), ]
for(v in 1:length(complete)) {
complete[[v]] <- complete[[v]][order(rownames(complete[[v]])),];
}
all(rownames(subtypes) == rownames(complete[[1]]))
# Compute similarity matrix for each data source using the scaled
# exponential euclidean distance:
W_list <- list();
for(i in 1:length(complete))
{
distances_matrix <- (dist2(as.matrix(complete[[i]]), as.matrix(complete[[i]])))^(1/2);
W_list[[i]] <- affinityMatrix(distances_matrix);
}
# Integration of multi-omics data using Similarity Network Fusion:
# t is the number of iterations and K is the number of neighbors to
# consider to compute the local similarity matrix:
W_int <- SNF(W_list, K=20, t=20);
W_averages <- Reduce(`+`, W_list) / length(W_list)
#passiamo la trasposta ossia il dataset features x samples per calcolare la similarity matrix con NEMO
W_NEMO = nemo.affinity.graph(lapply(complete, FUN=t), k = 20)
clustering_names <- list();
#Get the number of clusters for PAM equal to the number of unique subtypes
n_of_clusters <- length(unique(subtypes$Subtype_Selected))
PAM.compute <- function(similarity_matrix, k) {
#We obtain the normalized distance matrix form the similarity matrix of the i-th assay
distances <- as.dist(1 - NetPreProc::Max.Min.norm(similarity_matrix))
#We compute and return the PAM Clustering for the i-th assay
pam(distances, k=n_of_clusters)
}
# PAM clustering for each assay
pam_results <- list();
pam_next_count <- 1;
for(i in 1:length(W_list)) {
pam_results[[pam_next_count]] <- PAM.compute(W_list[[i]], n_of_clusters)
clustering_names[[pam_next_count]] <- paste("PAM", names(complete)[[i]])
pam_next_count <- pam_next_count + 1;
}
# PAM clustering for average matrix of the assays
pam_results[[pam_next_count]] <- PAM.compute(W_averages, n_of_clusters)
clustering_names[[pam_next_count]] <- "PAM average integration"
pam_next_count <- pam_next_count + 1;
# PAM clustering of the SNF integration matrix
pam_results[[pam_next_count]] <- PAM.compute(W_int, n_of_clusters)
clustering_names[[pam_next_count]] <- "PAM SNF integration"
pam_next_count <- pam_next_count + 1;
# PAM clustering of the NEMO affinity matrix
pam_results[[pam_next_count]] <- PAM.compute(W_NEMO, n_of_clusters)
clustering_names[[pam_next_count]] <- "PAM NEMO integration"
pam_next_count <- pam_next_count + 1
NEMO_spectral_clustering = spectralClustering(W_NEMO, n_of_clusters)
clustering_names[[pam_next_count]] <- "Spectral NEMO integration"
pam_next_count <- pam_next_count + 1
SNF_spectral_clustering <- SNFtool::spectralClustering(W_int, K=n_of_clusters)
clustering_names[[pam_next_count]] <- "Spectral SNF integration"
pam_next_count <- pam_next_count + 1
# Covert disease subtypes to numeric vector:
labels <- as.numeric(factor(subtypes$Subtype_Selected, levels=unique(subtypes$Subtype_Selected)));
# Compute measures:
types <- c("rand", "adjrand", "nmi1");
metrics <- list();
counter <- 1;
for (i in 1:length(pam_results)) {
metrics[[i]] <- mclustcomp(pam.res$clustering, labels, types=types);
counter <- i;
}
# Covert disease subtypes to numeric vector:
labels <- as.numeric(factor(subtypes$Subtype_Selected, levels=unique(subtypes$Subtype_Selected)));
# Compute measures:
types <- c("rand", "adjrand", "nmi1");
metrics <- list();
counter <- 1;
for (i in 1:length(pam_results)) {
metrics[[i]] <- mclustcomp(pam_results[[i]]$clustering, labels, types=types);
counter <- i;
}
counter <- counter + 1;
metrics[[counter]] <- mclustcomp(NEMO_spectral_clustering, labels, types=types)
counter <- counter + 1;
metrics[[counter]] <- mclustcomp(SNF_spectral_clustering, labels, types=types)
names(metrics) <- clustering_names;
# Print results:
as.data.frame(metrics.pam);
as.data.frame(metrics);
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
# Install and load required packages
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
library(dplyr)
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
dev.off()
source("~/.active-rstudio-document")
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
tempdir(check=TRUE)
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
Sys.setenv(TMPDIR = "D:")
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
TMPDIR
TMPDIR
tempdir(check=TRUE)
Sys.setenv(TMPDIR = "D://")
tempdir(check=TRUE)
Sys.setenv(TMPDIR = "/x")
tempdir(check=TRUE)
tempdir(check=TRUE)
Sys.setenv(TMPDIR = "D:")
Sys.setenv(TMPDIR = "D:")
Sys.setenv(TMPDIR = "D:")
Sys.setenv(TMPDIR = "D:")
Sys.setenv(TMPDIR = "D:")
tempdir(check=TRUE)
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Sample data frame
df <- data.frame(
col1 = c("A", "A", "B", "B", "C", "A"),
col2 = c("X", "Y", "X", "Y", "X", "Y"),
col3 = c("1", "2", "1", "2", "1", "2")
)
# Combine the columns to create unique x-axis values
df <- df %>% mutate(combined = paste(col1, col2, col3, sep = "-"))
# Count the occurrences of each unique combination
df_counts <- df %>% count(combined)
# Plot histogram
ggplot(df_counts, aes(x = combined, y = n)) +
geom_bar(stat = "identity") +
xlab("Combined Values") +
ylab("Frequency") +
theme_minimal()
